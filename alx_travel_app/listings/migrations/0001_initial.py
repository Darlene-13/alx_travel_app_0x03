# Generated by Django 5.2.2 on 2025-07-11 10:24

import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('user_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique Identifier for the user', primary_key=True, serialize=False)),
                ('phone_number', models.CharField(blank=True, help_text="Use's phone number", max_length=15, null=True)),
                ('profile_picture', models.ImageField(blank=True, help_text="Use's Profile picture", null=True, upload_to='profile_pics/')),
                ('role', models.CharField(choices=[('guest', 'Guest'), ('host', 'Host'), ('admin', 'Admin')], default='guest', help_text="User's Role", max_length=10)),
                ('email_verified', models.BooleanField(default=False, help_text="Whether the user's email has been verified")),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text="When the user's profile was created")),
                ('last_login', models.DateTimeField(auto_now_add=True, help_text='Last time user logged in')),
                ('linked_user', models.OneToOneField(help_text='Link to Django built-in user identification', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
                'db_table': 'user_profile',
            },
        ),
        migrations.CreateModel(
            name='Listing',
            fields=[
                ('property_id', models.UUIDField(default=uuid.uuid4, help_text='Unique Identifier for property', primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Name of the property', max_length=100)),
                ('description', models.TextField(help_text='Detailed description of the property')),
                ('property_type', models.CharField(choices=[('apartment', 'Apartment'), ('house', 'House'), ('room', 'Room'), ('villa', 'Villa'), ('condo', 'Condo'), ('townhouse', 'Townhouse'), ('cottage', 'Cottage'), ('cabin', 'Cabin'), ('loft', 'Loft'), ('other', 'Other')], max_length=50)),
                ('room_type', models.CharField(choices=[('entire_place', 'Entire Place'), ('private_room', 'Private Room'), ('shared_room', 'Shared Room'), ('hotel_room', 'Hotel Room')], help_text='Type of room available', max_length=20)),
                ('city', models.CharField(help_text='City where the property is located', max_length=100)),
                ('county', models.CharField(help_text='County where the property is located', max_length=100)),
                ('postal_code', models.CharField(help_text='Postal code of the property', max_length=100)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, help_text='Location of the property', max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=8, help_text='Longitude location of the property', max_digits=9, null=True)),
                ('bedroom', models.PositiveIntegerField(help_text='Number of bedrooms')),
                ('bathroom', models.PositiveIntegerField(help_text='Number of bathrooms')),
                ('max_guests', models.PositiveIntegerField(help_text='Maximum number of guests allowed')),
                ('price_per_night', models.DecimalField(decimal_places=2, help_text='Price per night in USD', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('suspended', 'Suspended')], default='pending', help_text=' Approval status of the lsiting', max_length=220)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When the listing was created')),
                ('updated_at', models.DateTimeField(auto_now_add=True, help_text='When the listing was updated')),
                ('host', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='listings', to='listings.userprofile')),
            ],
            options={
                'verbose_name': 'Listing',
                'verbose_name_plural': 'Listings',
                'db_table': 'listings',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('booking_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text=' Unique identifier for booking', primary_key=True, serialize=False)),
                ('start_date', models.DateTimeField(help_text='Check in date')),
                ('end_date', models.DateTimeField(help_text='Check out date')),
                ('guests', models.PositiveIntegerField(default=1, help_text='Number of guests', validators=[django.core.validators.MinValueValidator(1)])),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('canceled', 'Cancelled'), ('completed', 'Completed')], default='pending', help_text='Current booking status', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text=' When the booking was created')),
                ('updated_at', models.DateTimeField(auto_now_add=True, help_text='When the booking was last updated')),
                ('listing', models.ForeignKey(help_text='The property being booked', on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='listings.listing')),
                ('user', models.ForeignKey(help_text='The guest making the booking', on_delete=django.db.models.deletion.CASCADE, to='listings.userprofile')),
            ],
            options={
                'verbose_name': 'Booking',
                'verbose_name_plural': 'Bookings',
                'db_table': 'bookings',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('review_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text=' Unique identifier for the review', primary_key=True, serialize=False)),
                ('rating', models.PositiveIntegerField(help_text='Rating from 1 to 5 stars', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comment', models.TextField(blank=True, help_text="Optional guest's written review", null=True)),
                ('host_response', models.TextField(blank=True, help_text='Optional host response', null=True)),
                ('host_response_date', models.DateTimeField(blank=True, help_text='When the host responded', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Whent the review was created')),
                ('booking', models.OneToOneField(help_text='The booking this review is for', on_delete=django.db.models.deletion.CASCADE, related_name='review', to='listings.booking')),
                ('listing', models.ForeignKey(help_text='The property being reviewed', on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='listings.listing')),
                ('user', models.ForeignKey(help_text='The guest who wrote the review', on_delete=django.db.models.deletion.CASCADE, related_name='reviews_written', to='listings.userprofile')),
            ],
            options={
                'verbose_name': 'Review',
                'verbose_name_plural': 'Reviews',
                'db_table': 'reviews',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['rating'], name='reviews_rating_17e8a4_idx'), models.Index(fields=['created_at'], name='reviews_created_53b5d6_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='listing',
            index=models.Index(fields=['city', 'county'], name='listings_city_ce65c8_idx'),
        ),
        migrations.AddIndex(
            model_name='listing',
            index=models.Index(fields=['property_type'], name='listings_propert_74c98f_idx'),
        ),
        migrations.AddIndex(
            model_name='listing',
            index=models.Index(fields=['price_per_night'], name='listings_price_p_96809c_idx'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['start_date', 'end_date'], name='bookings_start_d_527bc3_idx'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['status'], name='bookings_status_51373b_idx'),
        ),
        migrations.AddConstraint(
            model_name='booking',
            constraint=models.CheckConstraint(condition=models.Q(('end_date__gt', models.F('start_date'))), name='Valid_date_range'),
        ),
    ]
